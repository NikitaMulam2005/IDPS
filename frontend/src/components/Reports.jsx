import React, { useState, useEffect } from "react";
import axios from "axios";

const Reports = () => {
  const [reportData, setReportData] = useState(null);
  const [reportType, setReportType] = useState("daily");
  const [loading, setLoading] = useState(false);
  const [threatTrends, setThreatTrends] = useState({ alert_types: [], countries: [] });
  const [error, setError] = useState(null);

  useEffect(() => {
    fetchThreatTrends();
  }, []);

  const fetchThreatTrends = async () => {
    try {
      const response = await axios.get("http://34.222.107.115:8000/api/threat_trends");
      console.log("Threat trends response:", response.data);
      setThreatTrends(response.data);
      setError(null);
    } catch (error) {
      console.error("Error fetching threat trends:", error.message, error.response?.data);
      setError(`Failed to fetch threat trends: ${error.message}`);
    }
  };

  const generateReport = async (type) => {
    setLoading(true);
    setError(null);
    try {
      const response = await axios.get(`http://34.222.107.115:8000/api/generate_report?type=${type}`);
      console.log("Report response:", response.data);
      setReportData(response.data);
      setReportType(type);
    } catch (error) {
      console.error("Error generating report:", error.message, error.response?.data);
      setError(`Failed to generate ${type} report: ${error.message}`);
    } finally {
      setLoading(false);
    }
  };

  const exportReport = () => {
    if (!reportData) return;
    const reportContent = `
Security Report - ${reportData.report_type.charAt(0).toUpperCase() + reportData.report_type.slice(1)}
Generated: ${new Date(reportData.generated_at).toLocaleString()}

SUMMARY
=======
Total Alerts: ${reportData.total_alerts}
High Severity Alerts: ${reportData.high_severity}
Blocked IPs: ${reportData.blocked_ips}

TOP THREATS
===========
${reportData.top_threats.map((threat) => `${threat[0]}: ${threat[1]} occurrences`).join("\n")}

This report was generated by Mini AI-IDPS
    `.trim();
    const blob = new Blob([reportContent], { type: "text/plain" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `security-report-${reportData.report_type}-${new Date().toISOString().split("T")[0]}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  return (
    <div className="p-6 max-w-7xl mx-auto">
      <div className="mb-8">
        <h1 className="text-3xl font-bold text-gray-900">Security Reports</h1>
        <p className="mt-2 text-gray-600">Generate comprehensive security analysis reports</p>
      </div>
      {error && (
        <div className="mb-8 p-4 bg-red-50 border-l-4 border-red-400 rounded">
          <p className="text-red-700">{error}</p>
        </div>
      )}
      <div className="bg-white p-6 rounded-lg shadow-md mb-8">
        <h3 className="text-xl font-semibold mb-4">Generate Report</h3>
        <div className="flex space-x-4">
          <button
            onClick={() => generateReport("daily")}
            disabled={loading}
            className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50"
          >
            {loading && reportType === "daily" ? "Generating..." : "Daily Report"}
          </button>
          <button
            onClick={() => generateReport("weekly")}
            disabled={loading}
            className="px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 disabled:opacity-50"
          >
            {loading && reportType === "weekly" ? "Generating..." : "Weekly Report"}
          </button>
          <button
            onClick={() => generateReport("monthly")}
            disabled={loading}
            className="px-4 py-2 bg-purple-600 text-white rounded-md hover:bg-purple-700 disabled:opacity-50"
          >
            {loading && reportType === "monthly" ? "Generating..." : "Monthly Report"}
          </button>
        </div>
      </div>
      {reportData && (
        <div className="bg-white rounded-lg shadow-md mb-8">
          <div className="p-6 border-b border-gray-200 flex justify-between items-center">
            <h3 className="text-xl font-semibold text-gray-900">
              {reportData.report_type.charAt(0).toUpperCase() + reportData.report_type.slice(1)} Security Report
            </h3>
            <div className="flex space-x-3">
              <span className="text-sm text-gray-500">
                Generated: {new Date(reportData.generated_at).toLocaleString()}
              </span>
              <button
                onClick={exportReport}
                className="px-3 py-1 bg-gray-600 text-white rounded text-sm hover:bg-gray-700"
              >
                Export
              </button>
            </div>
          </div>
          <div className="p-6">
            <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
              <div className="text-center p-4 bg-blue-50 rounded-lg">
                <p className="text-3xl font-bold text-blue-600">{reportData.total_alerts}</p>
                <p className="text-sm text-gray-600">Total Alerts</p>
              </div>
              <div className="text-center p-4 bg-red-50 rounded-lg">
                <p className="text-3xl font-bold text-red-600">{reportData.high_severity}</p>
                <p className="text-sm text-gray-600">High Severity</p>
              </div>
              <div className="text-center p-4 bg-green-50 rounded-lg">
                <p className="text-3xl font-bold text-green-600">{reportData.blocked_ips}</p>
                <p className="text-sm text-gray-600">Blocked IPs</p>
              </div>
              <div className="text-center p-4 bg-purple-50 rounded-lg">
                <p className="text-3xl font-bold text-purple-600">
                  {reportData.total_alerts > 0
                    ? ((reportData.high_severity / reportData.total_alerts) * 100).toFixed(1)
                    : 0}
                  %
                </p>
                <p className="text-sm text-gray-600">Threat Rate</p>
              </div>
            </div>
            <div className="mb-8">
              <h4 className="text-lg font-semibold text-gray-900 mb-4">Top Threat Types</h4>
              <div className="bg-gray-50 rounded-lg p-4">
                {reportData.top_threats && reportData.top_threats.length > 0 ? (
                  <div className="space-y-3">
                    {reportData.top_threats.map((threat, index) => (
                      <div key={index} className="flex items-center justify-between">
                        <span className="font-medium text-gray-700">{threat[0]}</span>
                        <div className="flex items-center space-x-3">
                          <div className="w-32 bg-gray-200 rounded-full h-2">
                            <div
                              className="bg-blue-600 h-2 rounded-full"
                              style={{
                                width: `${(threat[1] / (reportData.top_threats[0]?.[1] || 1)) * 100}%`,
                              }}
                            ></div>
                          </div>
                          <span className="font-bold text-gray-900 w-8 text-right">{threat[1]}</span>
                        </div>
                      </div>
                    ))}
                  </div>
                ) : (
                  <p className="text-gray-500 text-center">No threat data available for this period</p>
                )}
              </div>
            </div>
            <div>
              <h4 className="text-lg font-semibold text-gray-900 mb-4">Security Recommendations</h4>
              <div className="bg-yellow-50 border-l-4 border-yellow-400 p-4 rounded">
                <div className="space-y-2 text-sm">
                  {reportData.high_severity > 0 && (
                    <p className="text-yellow-700">
                      <strong>High Priority:</strong> {reportData.high_severity} high-severity alerts detected. Review and investigate these threats immediately.
                    </p>
                  )}
                  {reportData.blocked_ips > 5 && (
                    <p className="text-yellow-700">
                      <strong>Network Security:</strong> High number of blocked IPs ({reportData.blocked_ips}). Consider implementing additional network segmentation.
                    </p>
                  )}
                  <p className="text-yellow-700">
                    <strong>Monitoring:</strong> Continue monitoring for emerging threats and update security policies as needed.
                  </p>
                  <p className="text-yellow-700">
                    <strong>Regular Review:</strong> Schedule regular security reviews and update threat intelligence feeds.
                  </p>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
        <div className="bg-white rounded-lg shadow-md">
          <div className="p-6 border-b border-gray-200">
            <h3 className="text-lg font-semibold text-gray-900">Threat Types (Last 7 Days)</h3>
          </div>
          <div className="p-6">
            {threatTrends.alert_types && threatTrends.alert_types.length > 0 ? (
              <div className="space-y-4">
                {threatTrends.alert_types.slice(0, 8).map((type, index) => (
                  <div key={index} className="flex items-center justify-between">
                    <span className="text-sm text-gray-600 truncate flex-1">{type.name}</span>
                    <div className="flex items-center space-x-3 ml-4">
                      <div className="w-24 bg-gray-200 rounded-full h-2">
                        <div
                          className="bg-gradient-to-r from-blue-500 to-purple-500 h-2 rounded-full"
                          style={{
                            width: `${Math.min((type.count / (threatTrends.alert_types[0]?.count || 1)) * 100, 100)}%`,
                          }}
                        ></div>
                      </div>
                      <span className="text-sm font-medium text-gray-900 w-8 text-right">{type.count}</span>
                    </div>
                  </div>
                ))}
              </div>
            ) : (
              <p className="text-gray-500 text-center py-4">No threat data available</p>
            )}
          </div>
        </div>
        <div className="bg-white rounded-lg shadow-md">
          <div className="p-6 border-b border-gray-200">
            <h3 className="text-lg font-semibold text-gray-900">Geographic Distribution</h3>
          </div>
          <div className="p-6">
            {threatTrends.countries && threatTrends.countries.length > 0 ? (
              <div className="space-y-4">
                {threatTrends.countries.slice(0, 8).map((country, index) => (
                  <div key={index} className="flex items-center justify-between">
                    <span className="text-sm text-gray-600 truncate flex-1">{country.name}</span>
                    <div className="flex items-center space-x-3">
                      <div className="w-24 bg-gray-200 rounded-full h-2">
                        <div
                          className="bg-gradient-to-r from-green-500 to-blue-500 h-2 rounded-full"
                          style={{
                            width: `${Math.min((country.count / (threatTrends.countries[0]?.count || 1)) * 100, 100)}%`,
                          }}
                        ></div>
                      </div>
                      <span className="text-sm font-medium text-gray-900 w-8 text-right">{country.count}</span>
                    </div>
                  </div>
                ))}
              </div>
            ) : (
              <p className="text-gray-500 text-center py-4">No geographic data available</p>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default Reports;